---
import { getEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { getEntries } from "astro:content";
const card = (await getEntry("support-form", "card")).data;
const info = (await getEntry("support-form", "form")).data;
---

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<Layout>
  <section class="container donation-form py-[120px]">
    <form
      id="donation-form"
      class="needs-validation container position-relative z-2 pt-5 pb-lg-5 pb-md-4 pb-2
      [&_input]:w-full [&_input]:h-[52px] [&_input]:px-4
    [&_input]:rounded-lg [&_input]:border [&_input]:border-gray-200
    [&_input]:focus:outline-none [&_input]:focus:border-gray-300
    
    [&_textarea]:w-full [&_textarea]:px-4 [&_textarea]:py-3
    [&_textarea]:rounded-lg [&_textarea]:border [&_textarea]:border-gray-200
    [&_textarea]:focus:outline-none [&_textarea]:focus:border-gray-300"
      novalidate
    >
      <div class="row">
        <div
          class="col-lg-8 custom-scroll"
          style="overflow: auto; height: 77vh;"
        >
          <h1 class="heading-1 mb-4">{info.title}</h1>
          <div class="row g-4 pb-4 pb-md-5 mb-3 mb-md-1 font-poppins">
            <div class="col-sm-6">
              <label class="form-label fs-base" for="name"
                >{info.name.title}</label
              >
              <input
                class="form-control form-control-lg"
                type="text"
                placeholder={info.name.placeholder}
                required
                id="name"
              />
            </div>
            <div class="col-sm-6">
              <label class="form-label fs-base" for="email"
                >{info.email.title}</label
              >
              <input
                class="form-control form-control-lg"
                type="email"
                placeholder={info.email.placeholder}
                required
                id="email"
              />
            </div>
            <div class="col-sm-6">
              <label class="form-label fs-base" for="phone"
                >{info.phone.title}</label
              >
              <input
                class="form-control form-control-lg"
                type="tel"
                placeholder={info.phone.placeholder}
                required
                id="phone"
              />
            </div>
            <div class="col-sm-6">
              <label class="form-label fs-base" for="country"
                >{info.country.title}</label
              >
              <input
                class="form-control form-control-lg"
                type="text"
                placeholder={info.country.value}
                required
                id="country"
                value={info.country.value}
                readonly
              />
            </div>
            <div class="col-12">
              <label class="form-label fs-base" for="address"
                >{info.address.title}</label
              >
              <input
                class="form-control form-control-lg"
                type="text"
                placeholder={info.address.placeholder}
                required
                id="address"
              />
            </div>
            <div class="col-sm-6">
              <label class="form-label fs-base" for="city"
                >{info.city.title}</label
              >
              <input
                class="form-control form-control-lg"
                type="text"
                placeholder={info.city.placeholder}
                required
                id="city"
              />
            </div>
            <div class="col-sm-6">
              <label class="form-label fs-base" for="zipcode"
                >{info.pin.title}</label
              >
              <input
                class="form-control form-control-lg"
                type="text"
                placeholder={info.pin.placeholder}
                required
                id="zipcode"
              />
            </div>

            <div class="col-12">
              <label class="form-label fs-base" for="notes">{info.other}</label>
              <textarea
                class="form-control form-control-lg"
                style="height: 150px;"
                placeholder="Additional notes"
                id="notes"></textarea>
            </div>
          </div>
        </div>

        <div
          class="col pt-5 font-poppins min-w-[19rem] flex justify-center items-center"
        >
          {/* Main Card Container */}
          <div
            id="donate-now-button"
            class="w-full max-w-[23rem] bg-[#F5F5F5] rounded-3xl overflow-hidden py-4 lg:py-4"
          >
            {/* Card Content */}
            <div class="text-center text-black px-4">
              {/* Card Header */}
              <h3 class="text-xl mb-0">{card.total}</h3>

              {/* Amount Display */}
              <div
                id="amountToDisplay"
                class="text-6xl lg:text-8xl my-4 font-semibold font-poppins"
              >
                ₹0
              </div>

              {/* Frequency */}
              <div id="toBeDisplay" class="text-black/70 mb-4">per month</div>

              {/* Description */}
              <p class="text-black/70 mb-4 pb-2">
                {card.description}
              </p>

              {/* Action Button */}
              <button
                type="submit"
                class="w-full md:w-auto h-[60px]
                       px-3 sm:px-5 md:px-6
                       py-2 sm:py-3 md:py-5
                       text-base lg:text-lg
                       font-poppins font-medium
                       rounded-md
                       bg-[#D33C0D] text-white
                       transition-all
                       hover:bg-[#72321E]
                       active:ring-2 active:ring-[#D33C0D]
                       mb-2"
              >
                <span class="mx-3">{card.button}</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </form>
  </section>
</Layout>

<script>
  declare var Razorpay: any;

  const urlParams = new URLSearchParams(window.location.search);
  const donationAmount =
    Number(urlParams.get("donationAmount")) ||
    Number(urlParams.get("customAmount")) ||
    Number(urlParams.get("amount")) ||
    0;
  const paymentType = String(urlParams.get("donationFrequency")) || "onetime";
  const plan_id = String(urlParams.get("plan_id"));

  (document.getElementById("amountToDisplay") as HTMLDivElement).innerHTML =
    "₹" + donationAmount;
  if (paymentType === "onetime" || paymentType === "One Time") {
    (document.getElementById("toBeDisplay") as HTMLDivElement).innerHTML =
      "One Time";
  } else if (paymentType.toLowerCase() === "monthly") {
    (document.getElementById("toBeDisplay") as HTMLDivElement).innerHTML =
      "per month";
  } else if (paymentType.toLowerCase() === "yearly") {
    (document.getElementById("toBeDisplay") as HTMLDivElement).innerHTML =
      "per year";
  }

  async function initiatePayment() {
    const form = document.getElementById("donation-form") as HTMLFormElement;

    if (paymentType === "onetime") {
      if (!form.checkValidity()) {
        form.reportValidity();
        return;
      }

      const formData = {
        name: (document.getElementById("name") as HTMLInputElement).value,
        email: (document.getElementById("email") as HTMLInputElement).value,
        phone: (document.getElementById("phone") as HTMLInputElement).value,
        country: (document.getElementById("country") as HTMLInputElement).value,
        city: (document.getElementById("city") as HTMLInputElement).value,
        zipcode: (document.getElementById("zipcode") as HTMLInputElement).value,
        address: (document.getElementById("address") as HTMLInputElement).value,
        notes: {
          additional_notes: (
            document.getElementById("notes") as HTMLTextAreaElement
          ).value,
          city: (document.getElementById("city") as HTMLInputElement).value,
          zipcode: (document.getElementById("zipcode") as HTMLInputElement)
            .value,
          address: (document.getElementById("address") as HTMLInputElement)
            .value,
        },
        amount: donationAmount * 100,
        currency: "INR",
      };

      console.log(formData);

      try {
        // const response = await fetch("http://localhost:3000/create-order", {
        // const response = await fetch("http://localhost:3000/create-order", {
        const response = await fetch(
          "https://donation-backend-five.vercel.app/create-order",
          {
            method: "post",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(formData),
          }
        );

        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.message || "Payment initiation failed");
        }

        const options = {
          key: "rzp_test_HmglXnBOLh8qwp", // Replace with Razorpay Key ID
          amount: formData.amount,
          currency: "INR",
          name: "Kiran Foundations",
          description: "Donation",
          image: "https://kfastro.netlify.app/favicon.ico",
          order_id: data.orderId,
          handler: function (response: any) {
            alert("Payment Successful!");
            console.log("Payment ID:", response.razorpay_payment_id);
            form.reset();
          },
          prefill: {
            name: formData.name,
            email: formData.email,
            contact: formData.phone,
          },
          notes: formData.notes, // Pass notes to Razorpay
          theme: {
            color: "#3399cc",
          },
        };

        const rzp = new Razorpay(options);
        rzp.open();
      } catch (error) {
        console.error("Error initiating payment:", error);
        alert("Payment initiation failed. Please try again.");
      }
    } else {
      if (!form.checkValidity()) {
        form.reportValidity();
        return;
      }

      const formData = {
        name: (document.getElementById("name") as HTMLInputElement).value,
        email: (document.getElementById("email") as HTMLInputElement).value,
        phone: (document.getElementById("phone") as HTMLInputElement).value,
        country: (document.getElementById("country") as HTMLInputElement).value,
        city: (document.getElementById("city") as HTMLInputElement).value,
        zipcode: (document.getElementById("zipcode") as HTMLInputElement).value,
        address: (document.getElementById("address") as HTMLInputElement).value,
        notes: {
          additional_notes: (
            document.getElementById("notes") as HTMLTextAreaElement
          ).value,
          city: (document.getElementById("city") as HTMLInputElement).value,
          zipcode: (document.getElementById("zipcode") as HTMLInputElement)
            .value,
          address: (document.getElementById("address") as HTMLInputElement)
            .value,
        },
        amount: donationAmount * 100,
        currency: "INR",
        plan_id: plan_id,
      };

      try {
        // const response = await fetch("http://localhost:3000/create-subscription",{
        const response = await fetch(
          "https://donation-backend-five.vercel.app/create-subscription",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(formData),
          }
        );

        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.message || "Payment initiation failed");
        }

        const options = {
          key: "rzp_test_HmglXnBOLh8qwp", // Razorpay Key ID
          subscription_id: data.subscription_id, // Subscription ID generated by backend
          name: "Kiran Foundation",
          description: "Subscription for Premier Support",
          image: "https://kfastro.netlify.app/favicon.ico",
          handler: function (response) {
            alert("Subscription Successful!");
            console.log("Payment ID:", response.razorpay_payment_id);
            console.log("Subscription ID:", response.razorpay_subscription_id);
            form.reset();
          },
          prefill: {
            name: formData.name,
            email: formData.email,
            contact: formData.phone,
          },
          theme: {
            color: "#3399cc",
          },
        };

        const rzp = new Razorpay(options);
        rzp.open();
      } catch (error) {
        console.error("Error initiating payment:", error);
        alert("Payment initiation failed. Please try again.");
      }
    }
  }

  document
    .getElementById("donate-now-button")
    .addEventListener("click", function (e) {
      e.preventDefault();
      initiatePayment();
    });
</script>
