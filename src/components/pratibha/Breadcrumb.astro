---
import { getEntry } from "astro:content";

// Fetch header details directly
const headerData = await getEntry("header", "details");

// Get current URL
const url = Astro.url;
const segments = url.pathname.split("/").filter(Boolean);

// Function to find breadcrumb names from Markdown
const findBreadcrumbName = (path: string) => {
  console.log(path);
  
  if (headerData && headerData.data.navigation) {
    for (const section of headerData.data.navigation) {
      if (section.menu.url === path) {
        return section.menu.name;
      }
      if (section.submenu) {
        for (const link of section.submenu) {
          if (link.url === path) {
            return link.name;
          }
        }
      }
    }
  }
  return path.replace(/-/g, " "); // Fallback: Format path if not found
};

// Generate breadcrumbs dynamically
const breadcrumbs = segments.map((_, index) => {
  const path = "/" + segments.slice(0, index + 1).join("/");
  return {
    name: findBreadcrumbName(path),
    path,
  };
});


---


<nav class=" sm:flex h-[21px] gap-[10px] px-6 lg:px-8 max-w-[81rem] text-[0.875rem] font-normal leading-[100%] tracking-[0%] font-poppins mx-auto mt-32 ">

  <ol class="flex  space-x-2 items-start">
    <li>
      <a href="/" class="text-[#1E1E1E] hover:underline">Home</a>
    </li>
    {breadcrumbs.map((breadcrumb, index) => (
      <>
        <li class="mx-1"><i class="fa-solid fa-angle-right" style="color: #1E1E1E;"></i></li>
        <li>
          <a href={breadcrumb.path} class="text-[#1E1E1E] hover:underline">
            {breadcrumb.name.replace("/", " ")}
          </a>
        </li>
      </>
    ))}
  </ol>
</nav>