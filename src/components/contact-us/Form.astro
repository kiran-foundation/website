---
import Button from "../common/button.astro";

const { path } = Astro.props;
---

<script src="/assets/js/theme.min.js" is:inline></script>
<!-- <script src="/assets/js/common.js" is:inline></script> -->

<section id="form" class="bg-[#F1F1F1] max-w-[81rem] mx-auto   px-4 lg:px-0 mb-[128px] rounded-2xl">
  <div id="formframe" class="volunteeringForm-frame max-w-[800px] py-9 sm:pt-[120px] sm:pb-[168px]" style="display: block;">
    <h1 class=" m-0 pb-[80px] font-poppins font-[500] text-[24px] md:text-[2rem]">Your questions, feedback or concerns matter!</h1>

    <form id="volunteering-form" class=" ">
      <div class="volunteeringForm-input-container mb-0">
        <label for="full-name">Full Name </label>
        <input
          type="text"
          id="full-name"
          name="full-name"
          placeholder="Your name"
        />
      </div>
      <div class="volunteeringForm-input-container mb-0">
        <label for="email">Email  </label>
        <input type="text" id="email" name="email" placeholder="Your email" />
      </div>
      <div class="volunteeringForm-input-container mb-0">
        <label for="phone">Phone Number  </label>
        <input type="text" id="phone" name="phone" placeholder="Your number" />
      </div>
      <div class="volunteeringForm-input-container mb-0">
        <label for="more">How we can help?  </label>
        <textarea id="more" name="more" rows="5"></textarea>
      </div>
      
      <button type="submit" class="volunteeringForm-submit-button font-poppins font-medium w-full md:w-[182px]  px-3 sm:px-5 md:px-6 py-2 sm:py-3 md:py-5   text-base lg:text-lg rounded-md sm:rounded-md transition-all bg-[#D33C0D] text-white hover:bg-[#72321E] active:ring-2 active:ring-[#D33C0D] active:bg-[#72321E]  " 
        >Send Message</button
      >
    </form>
  </div>
  <div id="pop-up" style="display: none;" class=" rounded-2xl bg-[#F1F1F1] max-w-[1136px]  mx-auto  " >
      <div class=" max-w-[800px]  mx-auto   py-[128px]">

      <h1 class=" tracking-normal text-center font-poppins font-[600] text-[24px] md:text-[32px] leading-[140%] ">Thank you for reaching out! We will get back to you as soon as possible!</h1>
      <div class=" max-w-[400px] h-[400px] bg-[#D9D9D9] mt-[8rem] block mx-auto  "></div>
    </div>
  </div>
</section>

<script>
  const form = document.getElementById("volunteering-form") as HTMLFormElement;
  const formframe = document.getElementById("formframe") as HTMLFormElement;
  const popUp = document.getElementById("pop-up") as HTMLElement;
  const form_id = "1GBxqZhw1JGOfkFAkehcN2cWJ6kfJPs5y7eCCWBH2l7c";

  function validMail(email) {
    if (!email) return false;
    const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return regex.test(email);
  }
  function validMessage(more) {
    if (!more) return false;
    return true;
  }

  function validPhone(phone) {
    if (!phone) return false;
    // starts with 6 7 8 or 9 and have 10 digits nd only numbers
    const regex = /^[6-9]\d{9}$/;
    return regex.test(phone);
  }

  // Function to add red border and error message
  function addErrorMessage(inputId, messageText) {
    const inputElement = document.getElementById(inputId);

    // Add error class
    inputElement.classList.add("error");
    inputElement.style.color = "#992424"; // Set text color to red

    // Check if the error message already exists
    const errorMessage = inputElement.nextElementSibling;
    if (
      errorMessage &&
      errorMessage.classList.contains("volunteeringForm-suberror")
    ) {
      errorMessage.innerHTML = "❗" + messageText;
    } else {
      inputElement.insertAdjacentHTML(
        "afterend",
        "<div class='volunteeringForm-suberror'>❗" + messageText + "</div>"
      );
    }
  }

  function removeErrorMessage(inputId) {
    const inputElement = document.getElementById(inputId);
    if (!inputElement) return;

    // Remove error class and reset text color
    inputElement.classList.remove("error");
    inputElement.style.color = "#1E1E1E"; // Reset to default

    // Remove the error message
    const errorMessage = inputElement.nextElementSibling;
    if (
      errorMessage &&
      errorMessage.classList.contains("volunteeringForm-suberror")
    ) {
      errorMessage.remove();
    }
  }

  // Full Name - Blur validation
  document.getElementById("full-name").addEventListener("blur", () => {
    const nameInput = document.getElementById("full-name") as HTMLInputElement;
    if (!nameInput.value.trim()) {
      addErrorMessage("full-name", "Please enter your full name");
    } else {
      removeErrorMessage("full-name");
    }
  });
  document.getElementById("more").addEventListener("blur", () => {
    const nameInput = document.getElementById("more") as HTMLInputElement;
    if (!nameInput.value.trim()) {
      addErrorMessage("more", "Please enter your Message");
    } else {
      removeErrorMessage("more");
    }
  });

  // Email - Blur validation
  document.getElementById("email").addEventListener("blur", () => {
    const emailInput = document.getElementById("email") as HTMLInputElement;
    if (!emailInput.value.trim()) {
      addErrorMessage("email", "Please enter your email");
    } else if (!validMail(emailInput.value)) {
      addErrorMessage(
        "email",
        "Invalid email format. Example: name@domain.com"
      );
    } else {
      removeErrorMessage("email");
    }
  });

  // Phone - Blur validation
  document.getElementById("phone").addEventListener("blur", () => {
    const phoneInput = document.getElementById("phone") as HTMLInputElement;
    if (!phoneInput.value.trim()) {
      addErrorMessage("phone", "Please enter your phone number");
    } else if (!validPhone(phoneInput.value)) {
      addErrorMessage(
        "phone",
        "Invalid Format. Phone number must be 10 digits. Example: 6301234567"
      );
    } else {
      removeErrorMessage("phone");
    }
  });

  const submitButton = document.querySelector(
    ".volunteeringForm-submit-button"
  ) as HTMLButtonElement;

  function validateAllFields() {
    const name = (
      document.getElementById("full-name") as HTMLInputElement
    ).value.trim();
    const email = (
      document.getElementById("email") as HTMLInputElement
    ).value.trim();
    const phone = (
      document.getElementById("phone") as HTMLInputElement
    ).value.trim();
    const more = (
      document.getElementById("more") as HTMLInputElement
    ).value;

    const isFormValid = name !== "" && validMail(email) && validPhone(phone) ;
    submitButton.disabled = !isFormValid;
  }

  // Disable submit button on page load
  submitButton.disabled = true;

  // Re-validate on every input
  ["full-name", "email", "phone"].forEach((id) => {
    document.getElementById(id)?.addEventListener("input", validateAllFields);
  });

  document
    .getElementById("full-name")
    .addEventListener("input", () => removeErrorMessage("full-name"));
  document
    .getElementById("email")
    .addEventListener("input", () => removeErrorMessage("email"));
  document
    .getElementById("phone")
    .addEventListener("input", () => removeErrorMessage("phone"));
  document
    .getElementById("more")
    .addEventListener("input", () => removeErrorMessage("more"));

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    const fullName = (document.getElementById("full-name") as HTMLInputElement)
      .value;
    const email = (document.getElementById("email") as HTMLInputElement).value;
    const phone = (document.getElementById("phone") as HTMLInputElement).value;
    // get information about the role using current url
    const url = window.location.href;
    // const getInternshipName = (url) => url.split("/").slice(-2, -1)[0];
    // const role = getInternshipName(url);
    const more = (document.getElementById("more") as HTMLTextAreaElement).value;

    // Check if all fields are filled
    if (fullName && validMail(email) && validPhone(phone) && more) {
    // const url = `https://docs.google.com/forms/d/se/${form_id}/formResponse?&submit=Submit?usp=pp_url&entry.2005620554=${encodeURIComponent(fullName)}&entry.1045781291=${encodeURIComponent(email)}&entry.1166974658=${encodeURIComponent(phone)}&entry.1929439720=${encodeURIComponent(role)}&entry.138103954=${encodeURIComponent(more)}`;

    try {
      // Add a timeout to ensure the pop-up shows even if the request fails
      // const fetchPromise = fetch(url, { method: "POST" });
      formframe.style.display = "none"     // Show pop-up immediately, don't wait for fetch to complete
      popUp.style.display = "block";
      
      // Make sure the pop-up is prominently positioned
      
      
      // Reset the form fields
      form.reset();
      
      // Hide the message after 3 seconds
    
      
      // Wait for fetch to complete (but we've already shown the popup)
      // await fetchPromise;
      
    } catch (error) {
      console.error(error);
      // Still show the pop-up even if there's an error
      popUp.style.display = "block";
      
      // Hide the message after 3 seconds
      setTimeout(() => {
        popUp.style.display = "none";
      }, 3000);
    }
  } else {
      // make the form red where it is not filled
      if (!fullName) {
        addErrorMessage("full-name", "Please enter your full name");
      }
      if (!validMail(email)) {
        if (!email) {
          addErrorMessage("email", "Please enter your email");
        } else {
          addErrorMessage(
            "email",
            "Invalid email format. Example: name@domain.com"
          );
        }
      }
      if (!validPhone(phone)) {
        if (!phone) {
          addErrorMessage("phone", "Please enter your phone number");
        } else {
          addErrorMessage(
            "phone",
            " Invalid Format. Phone number must be 10 digits. Example: 6 301 234 567"
          );
        }
      }
      if (!validMessage(more)) {
        if (!more) {
          addErrorMessage("more", "Please enter your Message");
        } else {
          addErrorMessage(
            "more",
            "Please enter your Message"
          );
        }
      }
    }
  });
</script>