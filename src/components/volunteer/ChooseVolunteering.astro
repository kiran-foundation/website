---
import type { MarkdownFile } from "../../types/Markdown";
import { remark } from "remark";
import html from "remark-html";

const allVolunteering = import.meta.glob<MarkdownFile>(
  "/src/content/work/volunteer/*.md",
);
const staticTextsFile = import.meta.glob<MarkdownFile>(
  "/src/content/work/StaticTexts.md",
);

const loadVolunteeringData = async () => {
  return await Promise.all(
    Object.values(allVolunteering).map(async (volunteer) => {
      const { frontmatter, default: content } = await volunteer();
      const processedContent = await remark().use(html).process(content);
      return { ...frontmatter, content: processedContent.toString() };
    }),
  );
};

const loadStaticTexts = async () => {
  const staticFilePath = Object.keys(staticTextsFile)[0];
  if (!staticFilePath) {
    console.warn("Static texts file path not found");
  }

  const staticFile = staticTextsFile[staticFilePath];
  if (!staticFile) {
    console.warn("Static texts file not found");
  }

  const { frontmatter } = await staticFile();
  return frontmatter;
};

const volunteering = await loadVolunteeringData();
const staticTexts = await loadStaticTexts();

if (!staticTexts) {
  console.warn("Static texts not found");
}

const { showHighPriorityOnly = false, _isMainPage = false } = Astro.props;

const filteredVolunteering = volunteering
  .filter((volunteer) => !showHighPriorityOnly || volunteer.priority === "high")
  .sort((a, b) => a.title.localeCompare(b.title));

const volunteeringToDisplay = showHighPriorityOnly
  ? filteredVolunteering.slice(0, 3)
  : filteredVolunteering;

const { chooseVolunteering, applyNow, seeMore, Requirements } = staticTexts;
---

<section class="mainVolunteering-main-container">
  <h2 class="mainVolunteering-main-heading">{chooseVolunteering}</h2>
  <div class="mainVolunteering-sub-container">
    {volunteeringToDisplay.map((volunteer, index) => (
      <div class={`mainVolunteering-card`} id={`c${index + 1}`}>
        <div>
          <h3 class="mainVolunteering-card-heading">{volunteer.title}</h3>
          
          <p class="mainVolunteering-card-subheading">
            {volunteer.timeCommitment}
          </p>
          <h4 class="mainVolunteering-card-description-title">
            {Requirements}:
          </h4>
          <ul class="mainVolunteering-card-description">
            {(volunteer.requirements
              ? volunteer.requirements
                  .split("\n")
                  .filter((desc) => desc.trim() !== "")
              : []
            ).map((point, _i) => (
              <li>{point.trim().replace(/^-\s*/, "")}</li>
            ))}
          </ul>
        </div>
        <div class="mainVolunteering-card-buttons">
          <a
            class="mainVolunteering-btn mainVolunteering-btn-apply"
            href={`/volunteering/${volunteer.url}/#form`}
          >
            {applyNow}
          </a>
          <button class="mainVolunteering-btn mainVolunteering-btn-see-more"
            onclick={`window.location.href = '/volunteering/${volunteer.url}'`}>
            {seeMore}
          </button>
        </div>
      </div>
    ))}
  </div>
</section>
